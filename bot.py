import telebot
from telebot import types
from sqlalchemy.orm import Session
from database import Connect, User, Task, TaskLog
from datetime import datetime
import pytz

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ Telegram-–±–æ—Ç–∞
BOT_TOKEN = "6159695820:AAEiZ7yqCwSiKTTGO-_Ny-ykWC9WBjnJs98"

# –°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
bot = telebot.TeleBot(BOT_TOKEN)

# –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞ –ú–°–ö
MOSCOW_TZ = pytz.timezone("Europe/Moscow")

# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
TASKS_PER_PAGE = 5

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def get_session() -> Session:
    return Connect.create_connection()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
def save_user_profile_photo(user_id: int) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    session = get_session()
    try:
        user = session.query(User).filter_by(id=user_id).first()
        if user:
            try:
                user_photos = bot.get_user_profile_photos(user_id, limit=1)
                if user_photos.total_count > 0:
                    photo = user_photos.photos[0][-1]  # –°–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
                    file_info = bot.get_file(photo.file_id)
                    file_url = f"https://api.telegram.org/file/bot{BOT_TOKEN}/{file_info.file_path}"
                    if user.photo != file_url:  # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–æ—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
                        user.photo = file_url
                        session.commit()
                        print(f"–§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                else:
                    print(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ—Ç —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è user_id {user_id}: {e}")
        else:
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ")
    finally:
        session.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∏ –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é
def notify_and_show_menu(user_id: int) -> None:
    """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    session = get_session()
    try:
        user = session.query(User).filter_by(id=user_id).first()
        if user and user.is_confirmed:
            bot.send_message(
                user_id,
                "‚úÖ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∑–∞–¥–∞—á–∞–º–∏."
            )
            show_main_menu(user_id)
        else:
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    finally:
        session.close()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def show_main_menu(user_id: int) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –µ–≥–æ –∑–∞–¥–∞—á–∞–º–∏."""
    session = get_session()
    try:
        user = session.query(User).filter_by(id=user_id).first()
        if not user or not user.is_confirmed:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh"))
            bot.send_message(
                user_id,
                "‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –µ—â—ë –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω. –î–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
                reply_markup=markup
            )
            return

        # –ü–æ–¥—Å—á—ë—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        active_tasks_count = (
            session.query(Task)
            .filter(Task.user_id == user.id)
            .filter(Task.is_completed == False)
            .count()
        )

        text = (
            f"üëã –ü—Ä–∏–≤–µ—Ç, {user.username or '–°–æ—Ç—Ä—É–¥–Ω–∏–∫'}!\n\n"
            f"üìã –£ –≤–∞—Å {active_tasks_count} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á."
        )

        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üìå –ú–æ–∏ –∑–∞–¥–∞—á–∏", callback_data="tasks_1"))
        markup.add(types.InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh"))

        bot.send_message(user_id, text, reply_markup=markup)
    finally:
        session.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def handle_start(message):
    user_id = message.from_user.id
    session = get_session()
    try:
        user = session.query(User).filter_by(id=user_id).first()
        if not user:
            user = User(
                id=user_id,
                username=message.from_user.username,
                email=None,
                phone=None,
                photo=None,
                is_confirmed=False
            )
            session.add(user)
            session.commit()
            save_user_profile_photo(user_id)
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh"))
            bot.reply_to(
                message,
                "üéâ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
                reply_markup=markup
            )
        else:
            save_user_profile_photo(user_id)  # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ—Ç–æ
            show_main_menu(user_id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ /start –¥–ª—è {user_id}: {e}")
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        session.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
@bot.callback_query_handler(func=lambda call: True)
def button_handler(call):
    user_id = call.from_user.id
    session = get_session()
    try:
        user = session.query(User).filter_by(id=user_id).first()
        if not user:
            bot.send_message(call.message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
            return

        data = call.data
        if data == "refresh":
            user.username = call.from_user.username
            save_user_profile_photo(user_id)
            session.commit()
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text="–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!",
                reply_markup=None
            )
            show_main_menu(user_id)
        elif data.startswith("tasks_"):
            page = int(data.split("_")[-1])
            show_tasks(call.message, user, session, page)
        elif data.startswith("view_task_"):
            task_idx = int(data.split("_")[-1])
            page = int(data.split("_")[-2])
            show_task_details(call.message, user, session, task_idx, page)
        elif data.startswith("complete_"):
            task_id = int(data.split("_")[-1])
            complete_task(call.message, user, task_id, session)
        elif data == "main_menu":
            try:
                bot.delete_message(call.message.chat.id, call.message.message_id)
            except:
                pass
            show_main_menu(user_id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ button_handler –¥–ª—è {user_id}: {e}")
        bot.send_message(call.message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    finally:
        session.close()

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def show_tasks(message, user: User, session: Session, page: int = 1):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if not user.is_confirmed:
        bot.send_message(message.chat.id, "‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω.")
        return

    tasks = (
        session.query(Task)
        .filter(Task.user_id == user.id)
        .filter(Task.is_completed == False)
        .all()
    )

    if not tasks:
        bot.send_message(message.chat.id, "‚úÖ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á!")
        return

    total_tasks = len(tasks)
    total_pages = (total_tasks + TASKS_PER_PAGE - 1) // TASKS_PER_PAGE
    page = max(1, min(page, total_pages))
    start_idx = (page - 1) * TASKS_PER_PAGE
    end_idx = min(start_idx + TASKS_PER_PAGE, total_tasks)
    tasks_on_page = tasks[start_idx:end_idx]

    message_text = "üìå –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:\n\n"
    for idx, task in enumerate(tasks_on_page, start=start_idx + 1):
        message_text += (
            f"{idx}. {task.title}\n"
            f"–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {task.priority.value}\n\n"
        )

    markup = types.InlineKeyboardMarkup()
    for idx, task in enumerate(tasks_on_page, start=start_idx + 1):
        markup.add(
            types.InlineKeyboardButton(f"{idx}. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏", callback_data=f"view_task_{page}_{idx}")
        )

    nav_buttons = []
    if page > 1:
        nav_buttons.append(types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data=f"tasks_{page-1}"))
    if page < total_pages:
        nav_buttons.append(types.InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ ‚û°", callback_data=f"tasks_{page+1}"))
    if nav_buttons:
        markup.row(*nav_buttons)
    markup.add(types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))

    try:
        bot.delete_message(message.chat.id, message.message_id)
    except:
        pass

    bot.send_message(
        chat_id=message.chat.id,
        text=message_text,
        reply_markup=markup
    )

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –∑–∞–¥–∞—á–∏
def show_task_details(message, user: User, session: Session, task_idx: int, page: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∑–∞–¥–∞—á–∏."""
    tasks = (
        session.query(Task)
        .filter(Task.user_id == user.id)
        .filter(Task.is_completed == False)
        .all()
    )

    start_idx = (page - 1) * TASKS_PER_PAGE
    tasks_on_page = tasks[start_idx:start_idx + TASKS_PER_PAGE]
    if not tasks_on_page or task_idx - 1 >= len(tasks):
        bot.send_message(message.chat.id, "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    task = tasks[task_idx - 1]

    message_text = (
        f"üìå –ó–∞–¥–∞—á–∞ #{task.id}:\n\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {task.title}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {task.description or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}\n"
        f"–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {task.priority.value}"
    )

    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å", callback_data=f"complete_{task.id}")
    )
    markup.add(
        types.InlineKeyboardButton("‚¨Ö –ö —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á", callback_data=f"tasks_{page}")
    )
    markup.add(types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))

    try:
        bot.delete_message(message.chat.id, message.message_id)
    except:
        pass

    bot.send_message(
        chat_id=message.chat.id,
        text=message_text,
        reply_markup=markup
    )

# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
def complete_task(message, user: User, task_id: int, session: Session):
    """–û—Ç–º–µ—á–∞–µ—Ç –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é."""
    task = session.query(Task).filter_by(id=task_id, user_id=user.id).first()
    if not task:
        bot.send_message(message.chat.id, "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.")
        return

    if task.is_completed:
        bot.send_message(message.chat.id, f"–ó–∞–¥–∞—á–∞ #{task_id} —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å—å –≤ TaskLog
    existing_log = session.query(TaskLog).filter_by(task_id=task_id, user_id=user.id).first()
    if not existing_log:
        # –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏
        task_log = TaskLog(
            task_id=task_id,
            user_id=user.id,
            completed_at=datetime.now(MOSCOW_TZ)
        )
        session.add(task_log)

    # –ü–æ–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
    task.is_completed = True
    session.commit()

    try:
        bot.delete_message(message.chat.id, message.message_id)
    except:
        pass

    bot.send_message(message.chat.id, f"‚úÖ –ó–∞–¥–∞—á–∞ #{task_id} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")
    show_main_menu(message.chat.id)

# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ
def notify_user_of_specific_task(user: User, task: Task):
    """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ."""
    message_text = (
        f"üìå –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞!\n\n"
        f"–ó–∞–¥–∞—á–∞ #{task.id}: {task.title}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {task.description or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}\n"
        f"–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {task.priority.value}"
    )
    try:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üìã –ö –∑–∞–¥–∞—á–∞–º", callback_data="tasks_1"))
        bot.send_message(user.id, message_text, reply_markup=markup)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}: {e}")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ
def check_and_notify_specific_task(task_id: int):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–¥–∞—á—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–æ–≤–∞—è."""
    session = get_session()
    try:
        task = session.query(Task).filter_by(id=task_id).first()
        if task and task.user_id and not task.is_completed:
            user = session.query(User).filter_by(id=task.user_id).first()
            if user:
                notify_user_of_specific_task(user, task)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ check_and_notify_specific_task –¥–ª—è task_id {task_id}: {e}")
    finally:
        session.close()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.polling(none_stop=True)

if __name__ == "__main__":
    main()